// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiLingualServiceClient is the client API for MultiLingualService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiLingualServiceClient interface {
	Translate(ctx context.Context, in *MultiLingualRequest, opts ...grpc.CallOption) (*MultiLingualResponse, error)
	GetSupportedLanguages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error)
}

type multiLingualServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiLingualServiceClient(cc grpc.ClientConnInterface) MultiLingualServiceClient {
	return &multiLingualServiceClient{cc}
}

func (c *multiLingualServiceClient) Translate(ctx context.Context, in *MultiLingualRequest, opts ...grpc.CallOption) (*MultiLingualResponse, error) {
	out := new(MultiLingualResponse)
	err := c.cc.Invoke(ctx, "/multiLingualService/translate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiLingualServiceClient) GetSupportedLanguages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error) {
	out := new(GetSupportedLanguagesResponse)
	err := c.cc.Invoke(ctx, "/multiLingualService/GetSupportedLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiLingualServiceServer is the server API for MultiLingualService service.
// All implementations must embed UnimplementedMultiLingualServiceServer
// for forward compatibility
type MultiLingualServiceServer interface {
	Translate(context.Context, *MultiLingualRequest) (*MultiLingualResponse, error)
	GetSupportedLanguages(context.Context, *emptypb.Empty) (*GetSupportedLanguagesResponse, error)
	mustEmbedUnimplementedMultiLingualServiceServer()
}

// UnimplementedMultiLingualServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiLingualServiceServer struct {
}

func (UnimplementedMultiLingualServiceServer) Translate(context.Context, *MultiLingualRequest) (*MultiLingualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (UnimplementedMultiLingualServiceServer) GetSupportedLanguages(context.Context, *emptypb.Empty) (*GetSupportedLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedLanguages not implemented")
}
func (UnimplementedMultiLingualServiceServer) mustEmbedUnimplementedMultiLingualServiceServer() {}

// UnsafeMultiLingualServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiLingualServiceServer will
// result in compilation errors.
type UnsafeMultiLingualServiceServer interface {
	mustEmbedUnimplementedMultiLingualServiceServer()
}

func RegisterMultiLingualServiceServer(s grpc.ServiceRegistrar, srv MultiLingualServiceServer) {
	s.RegisterService(&MultiLingualService_ServiceDesc, srv)
}

func _MultiLingualService_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiLingualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiLingualServiceServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiLingualService/translate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiLingualServiceServer).Translate(ctx, req.(*MultiLingualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiLingualService_GetSupportedLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiLingualServiceServer).GetSupportedLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiLingualService/GetSupportedLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiLingualServiceServer).GetSupportedLanguages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiLingualService_ServiceDesc is the grpc.ServiceDesc for MultiLingualService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiLingualService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiLingualService",
	HandlerType: (*MultiLingualServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "translate",
			Handler:    _MultiLingualService_Translate_Handler,
		},
		{
			MethodName: "GetSupportedLanguages",
			Handler:    _MultiLingualService_GetSupportedLanguages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
